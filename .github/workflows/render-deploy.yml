name: Deploy to Render with Redis

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  test:
    name: Run Tests with Redis
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_dashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: |
            backend/pnpm-lock.yaml
            frontend/pnpm-lock.yaml

      - name: Install backend dependencies
        run: pnpm install
        working-directory: backend

      - name: Install frontend dependencies
        run: pnpm install
        working-directory: frontend

      - name: Generate Prisma Client
        run: pnpm prisma generate
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard_test

      - name: Run database migrations
        run: pnpm prisma migrate deploy
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard_test

      - name: Test Redis Connection
        run: |
          cd backend
          node -e "
          const Redis = require('ioredis');
          const redis = new Redis('redis://localhost:6379');
          redis.ping().then(() => {
            console.log('‚úÖ Redis connection successful');
            redis.quit();
          }).catch(err => {
            console.error('‚ùå Redis connection failed:', err);
            process.exit(1);
          });"
        env:
          REDIS_URL: redis://localhost:6379

      - name: Type check backend
        run: pnpm type-check
        working-directory: backend

      - name: Type check frontend
        run: pnpm type-check
        working-directory: frontend

      - name: Build backend
        run: pnpm build
        working-directory: backend
        env:
          REDIS_URL: redis://localhost:6379

      - name: Build frontend
        run: SKIP_LINT=true pnpm build
        working-directory: frontend

      - name: Test Redis Integration
        run: |
          cd backend
          REDIS_URL=redis://localhost:6379 DATABASE_URL=postgresql://postgres:postgres@localhost:5432/finance_dashboard_test node -e "
          const { redisService } = require('./dist/services/redisService');
          (async () => {
            try {
              await redisService.connect();
              await redisService.cacheDashboardData('test-user', {test: 'data'}, 10);
              const result = await redisService.getDashboardData('test-user');
              console.log('‚úÖ Redis integration test passed:', result);
              await redisService.disconnect();
            } catch (err) {
              console.error('‚ùå Redis integration test failed:', err);
              process.exit(1);
            }
          })();"

  # ... existing security-scan job ...

  deploy:
    name: Deploy to Render Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://your-frontend-app.onrender.com

    steps:
      - name: Check Deploy Hooks Configuration
        id: check-hooks
        run: |
          echo "Checking deployment prerequisites..."
          hooks_ready=true

          if [[ -z "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}" ]]; then
            echo "‚ö†Ô∏è  RENDER_DEPLOY_HOOK_BACKEND not configured"
            hooks_ready=false
          fi

          if [[ -z "${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}" ]]; then
            echo "‚ö†Ô∏è  RENDER_DEPLOY_HOOK_FRONTEND not configured"
            hooks_ready=false
          fi

          echo "hooks_ready=$hooks_ready" >> $GITHUB_OUTPUT

      - name: Deploy Backend with Redis
        if: steps.check-hooks.outputs.hooks_ready == 'true'
        run: |
          echo "üöÄ Deploying backend with Redis support..."
          response=$(curl -s -w "%{http_code}" -o /tmp/backend_response.txt \
            -X POST "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}" \
            -H "Content-Type: application/json")

          http_code=${response: -3}
          if [[ $http_code -eq 200 || $http_code -eq 201 ]]; then
            echo "‚úÖ Backend with Redis deployed successfully (HTTP $http_code)"
          else
            echo "‚ùå Backend deployment failed (HTTP $http_code)"
            exit 1
          fi

      - name: Deploy Frontend
        if: steps.check-hooks.outputs.hooks_ready == 'true'
        run: |
          echo "üöÄ Deploying frontend..."
          response=$(curl -s -w "%{http_code}" -o /tmp/frontend_response.txt \
            -X POST "${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}" \
            -H "Content-Type: application/json")

          http_code=${response: -3}
          if [[ $http_code -eq 200 || $http_code -eq 201 ]]; then
            echo "‚úÖ Frontend deployed successfully (HTTP $http_code)"
          else
            echo "‚ùå Frontend deployment failed (HTTP $http_code)"
            exit 1
          fi

      - name: Verify Redis Integration in Production
        if: steps.check-hooks.outputs.hooks_ready == 'true'
        run: |
          echo "üîç Verifying Redis integration in production..."
          sleep 30  # Wait for deployment to complete

          # Check health endpoint for Redis status
          response=$(curl -s https://your-backend-app.onrender.com/health)
          echo "Health check response: $response"

          redis_status=$(echo $response | grep -o '"redis":"[^"]*"' | cut -d'"' -f4)
          if [[ "$redis_status" == "healthy" ]]; then
            echo "‚úÖ Production Redis integration verified"
          else
            echo "‚ö†Ô∏è Redis may not be fully connected, but deployment completed"
          fi

  # ... existing notify job ...
