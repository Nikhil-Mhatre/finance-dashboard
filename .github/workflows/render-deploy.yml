name: Deploy to Render

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_dashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: |
            backend/pnpm-lock.yaml
            frontend/pnpm-lock.yaml

      - name: Install backend dependencies
        run: pnpm install
        working-directory: backend

      - name: Install frontend dependencies
        run: pnpm install
        working-directory: frontend

      - name: Generate Prisma Client
        run: pnpm prisma generate
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard_test

      - name: Run database migrations
        run: pnpm prisma migrate deploy
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard_test

      - name: Type check backend
        run: pnpm type-check
        working-directory: backend

      - name: Type check frontend
        run: pnpm type-check
        working-directory: frontend

      - name: Build backend
        run: pnpm build
        working-directory: backend

      - name: Build frontend (production mode)
        run: SKIP_LINT=true pnpm build
        working-directory: frontend

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

  deploy-staging:
    name: Deploy to Render Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: staging
      url: https://ai-finance-dashboard-frontend-staging.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging using Blueprint
        run: |
          echo "üöÄ Deploying to staging environment..."

          # Install Render CLI (if using Blueprint deployment)
          curl -fsSL https://cli.render.com/install | bash

          # Deploy using staging configuration
          render blueprint launch render-staging.yaml \
            --service-type=web \
            --name="staging-deployment" \
            --repo="$GITHUB_REPOSITORY" \
            --branch="main"
            
          echo "‚úÖ Staging deployment initiated successfully"

  deploy-production:
    name: Deploy to Render Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')

    environment:
      name: production
      url: https://ai-finance-dashboard-frontend-prod.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production using Blueprint
        run: |
          echo "üöÄ Deploying to production environment..."

          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Deploying version: $VERSION"

          # Install Render CLI
          curl -fsSL https://cli.render.com/install | bash

          # Deploy using production configuration
          render blueprint launch render.yaml \
            --service-type=web \
            --name="production-deployment-$VERSION" \
            --repo="$GITHUB_REPOSITORY" \
            --branch="main"
            
          echo "‚úÖ Production deployment initiated successfully"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security-scan, deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Deployment Status Summary
        run: |
          echo "üìä CI/CD Workflow Summary:"
          echo "========================="

          # Test results
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ Tests: Passed"
          else
            echo "‚ùå Tests: Failed"
          fi

          # Security scan results
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "‚úÖ Security Scan: Passed"
          else
            echo "‚ö†Ô∏è Security Scan: Issues found"
          fi

          # Staging deployment
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "‚úÖ Staging Deployment: Success"
            echo "üåê Staging URL: https://ai-finance-dashboard-frontend-staging.onrender.com"
          elif [[ "${{ needs.deploy-staging.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Staging Deployment: Skipped (not main branch push)"
          fi

          # Production deployment
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "‚úÖ Production Deployment: Success"
            echo "üåê Production URL: https://ai-finance-dashboard-frontend-prod.onrender.com"
          elif [[ "${{ needs.deploy-production.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Production Deployment: Skipped (not tag push)"
          fi

          echo "========================="

          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "üéâ CI/CD Pipeline: Successfully completed!"
          else
            echo "‚ùå CI/CD Pipeline: Some issues need attention"
            exit 1
          fi
