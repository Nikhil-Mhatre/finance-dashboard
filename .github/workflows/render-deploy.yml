name: Deploy to Render

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_dashboard
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-start-period 30s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Generate Prisma Client
        run: |
          cd backend
          npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard

      - name: Run database migrations
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          SKIP_LINT=true npm run build

      - name: Run backend tests
        run: |
          cd backend
          npm test || echo "No backend tests found"

      - name: Run frontend tests
        run: |
          cd frontend
          npm test || echo "No frontend tests found"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://ai-finance-dashboard-frontend.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend service
        if: ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}
        run: |
          echo "üöÄ Deploying backend..."
          response=$(curl -s -w "%{http_code}" -o /tmp/backend_deploy.txt \
            -X POST "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}" \
            -H "Content-Type: application/json")

          http_code=${response: -3}
          if [[ $http_code -eq 200 || $http_code -eq 201 ]]; then
            echo "‚úÖ Backend deployment triggered successfully"
          else
            echo "‚ùå Backend deployment failed (HTTP $http_code)"
            cat /tmp/backend_deploy.txt
            exit 1
          fi

      - name: Deploy frontend service
        if: ${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}
        run: |
          echo "üöÄ Deploying frontend..."
          response=$(curl -s -w "%{http_code}" -o /tmp/frontend_deploy.txt \
            -X POST "${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}" \
            -H "Content-Type: application/json")

          http_code=${response: -3}
          if [[ $http_code -eq 200 || $http_code -eq 201 ]]; then
            echo "‚úÖ Frontend deployment triggered successfully"
          else
            echo "‚ùå Frontend deployment failed (HTTP $http_code)"
            cat /tmp/frontend_deploy.txt
            exit 1
          fi

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting 30 seconds for deployment to complete..."
          sleep 30

      - name: Health check
        run: |
          echo "üîç Checking application health..."
          backend_health=$(curl -s -o /dev/null -w "%{http_code}" https://ai-finance-dashboard-backend.onrender.com/health)
          frontend_health=$(curl -s -o /dev/null -w "%{http_code}" https://ai-finance-dashboard-frontend.onrender.com)

          if [[ $backend_health -eq 200 ]]; then
            echo "‚úÖ Backend is healthy"
          else
            echo "‚ö†Ô∏è Backend health check failed (HTTP $backend_health)"
          fi

          if [[ $frontend_health -eq 200 ]]; then
            echo "‚úÖ Frontend is healthy"
          else
            echo "‚ö†Ô∏è Frontend health check failed (HTTP $frontend_health)"
          fi

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [test, security-scan, deploy]
    if: always()

    steps:
      - name: Deployment summary
        run: |
          echo "üìä CI/CD Pipeline Summary"
          echo "========================"

          # Test results
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ Tests: Passed"
          else
            echo "‚ùå Tests: Failed"
          fi

          # Security scan results
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "‚úÖ Security Scan: Passed"
          else
            echo "‚ö†Ô∏è Security Scan: Issues found"
          fi

          # Deployment results
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment: Success"
            echo "üåê Application URL: https://ai-finance-dashboard-frontend.onrender.com"
            echo "üîó API URL: https://ai-finance-dashboard-backend.onrender.com"
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Deployment: Skipped (not main branch push)"
          else
            echo "‚ùå Deployment: Failed"
          fi

          echo "========================"

          # Overall status
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "üéâ Pipeline: Core processes successful!"
          else
            echo "‚ùå Pipeline: Some issues need attention"
            exit 1
          fi
