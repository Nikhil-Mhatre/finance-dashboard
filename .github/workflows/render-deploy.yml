name: Deploy to Render

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_dashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install root dependencies
        run: pnpm install

      - name: Install backend dependencies
        run: cd backend && pnpm install

      - name: Install frontend dependencies
        run: cd frontend && pnpm install

      - name: Generate Prisma Client
        run: cd backend && pnpm prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard_test

      - name: Run database migrations
        run: cd backend && pnpm prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard_test

      - name: Type check backend
        run: cd backend && pnpm type-check

      - name: Type check frontend
        run: cd frontend && pnpm type-check

      - name: Build backend
        run: cd backend && pnpm build

      - name: Build frontend (production mode)
        run: cd frontend && SKIP_LINT=true pnpm build

      - name: Run backend tests
        run: cd backend && pnpm test || echo "No tests found"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard_test

      - name: Run frontend tests
        run: cd frontend && pnpm test || echo "No tests found"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  deploy-staging:
    name: Deploy to Render Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: staging
      url: https://ai-finance-dashboard-frontend-staging.onrender.com

    steps:
      - name: Trigger Render Deploy
        run: |
          curl -X POST "${{ secrets.RENDER_STAGING_DEPLOY_HOOK }}" \
          -H "Content-Type: application/json"

  deploy-production:
    name: Deploy to Render Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')

    environment:
      name: production
      url: https://ai-finance-dashboard-frontend.onrender.com

    steps:
      - name: Trigger Render Deploy
        run: |
          curl -X POST "${{ secrets.RENDER_PRODUCTION_DEPLOY_HOOK }}" \
          -H "Content-Type: application/json"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
