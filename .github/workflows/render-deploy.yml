# .github/workflows/render-deploy.yml
name: Deploy AI Finance Dashboard to Render

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "8"

permissions:
  actions: read
  contents: read
  security-events: write
  id-token: write

jobs:
  # ========== TESTING & VALIDATION ==========
  test:
    name: Test with Services
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_finance_dashboard_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install Backend Dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./

      - name: Generate Prisma Client
        run: pnpm prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_finance_dashboard_test

      - name: Run Database Migrations
        run: pnpm prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_finance_dashboard_test

      - name: Verify Redis Connection
        run: |
          node -e "
          const { createClient } = require('redis');
          const Redis = require('ioredis');

          (async () => {
            // Test node-redis (for sessions)
            const nodeRedisClient = createClient({ url: 'redis://localhost:6379' });
            await nodeRedisClient.connect();
            await nodeRedisClient.ping();
            console.log('‚úÖ node-redis connection verified');
            await nodeRedisClient.quit();
            
            // Test ioredis (for app caching)
            const ioredisClient = new Redis('redis://localhost:6379');
            await ioredisClient.ping();
            console.log('‚úÖ ioredis connection verified');
            await ioredisClient.quit();
          })();
          "

      - name: TypeScript Type Check
        run: pnpm type-check

      - name: Build Backend
        run: pnpm build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_finance_dashboard_test
          REDIS_URL: redis://localhost:6379
          SESSION_SECRET: test-session-secret-for-ci
          GOOGLE_CLIENT_ID: fake-google-client-id
          GOOGLE_CLIENT_SECRET: fake-google-client-secret

      - name: Test Backend Services Integration
        run: |
          node -e "
          require('dotenv').config();
          const { redisService } = require('./dist/services/redisService');

          (async () => {
            try {
              console.log('üß™ Testing Redis service integration...');
              await redisService.connect();
              
              // Test caching
              await redisService.cacheDashboardData('test-user-123', { 
                totalBalance: 1000, 
                testTimestamp: Date.now() 
              }, 30);
              
              const cached = await redisService.getDashboardData('test-user-123');
              if (!cached || cached.totalBalance !== 1000) {
                throw new Error('Cache test failed');
              }
              
              // Test health check
              const health = await redisService.healthCheck();
              if (health.status !== 'healthy') {
                throw new Error('Health check failed');
              }
              
              console.log('‚úÖ Redis service integration tests passed');
              await redisService.disconnect();
            } catch (err) {
              console.error('‚ùå Redis integration test failed:', err);
              process.exit(1);
            }
          })();
          "
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_finance_dashboard_test
          REDIS_URL: redis://localhost:6379
          SESSION_SECRET: test-session-secret-for-ci

      - name: Run API Health Check
        run: |
          # Start server in background for testing
          pnpm start &
          SERVER_PID=$!
          sleep 5

          # Test health endpoint
          response=$(curl -s http://localhost:3001/health)
          echo "Health response: $response"

          # Check if Redis is reported as healthy
          if echo "$response" | grep -q '"redis":"healthy"'; then
            echo "‚úÖ API health check passed with Redis"
          else
            echo "‚ö†Ô∏è API started but Redis may not be fully integrated"
          fi

          # Cleanup
          kill $SERVER_PID || true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_finance_dashboard_test
          REDIS_URL: redis://localhost:6379
          SESSION_SECRET: test-session-secret-for-ci
          GOOGLE_CLIENT_ID: fake-google-client-id
          GOOGLE_CLIENT_SECRET: fake-google-client-secret
          NODE_ENV: test

  # ========== SECURITY SCAN ==========
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Security Audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Scan for Secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Environment Variables
        run: |
          echo "üîç Validating required environment variables..."

          # Check for potential credential leaks in codebase
          if grep -r "sk-" . --include="*.ts" --include="*.js" --include="*.json" --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ö†Ô∏è Potential API keys found in code"
          fi

          # Validate OAuth setup references
          if ! grep -r "GOOGLE_CLIENT_ID" . --include="*.ts" --exclude-dir=node_modules; then
            echo "‚ö†Ô∏è OAuth configuration might be missing"
          fi

  # ========== PRODUCTION DEPLOYMENT ==========
  deploy:
    name: Deploy to Render Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL || 'https://ai-finance-dashboard.onrender.com' }}

    steps:
      - name: Validate Deployment Secrets
        id: validate-secrets
        run: |
          echo "üîç Checking deployment configuration..."

          deployment_ready=true

          if [[ -z "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}" ]]; then
            echo "‚ùå RENDER_DEPLOY_HOOK_BACKEND not configured"
            deployment_ready=false
          fi

          if [[ -z "${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}" ]]; then
            echo "‚ö†Ô∏è RENDER_DEPLOY_HOOK_FRONTEND not configured (backend-only deployment)"
          fi

          # Optional notification webhook
          if [[ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]]; then
            echo "‚úÖ Discord notifications enabled"
          fi

          echo "deployment_ready=$deployment_ready" >> $GITHUB_OUTPUT

      - name: Deploy Backend API
        if: steps.validate-secrets.outputs.deployment_ready == 'true'
        run: |
          echo "üöÄ Deploying AI Finance Dashboard Backend..."

          response=$(curl -s -w "%{response_code}:%{http_code}" \
            -X POST "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}" \
            -H "Content-Type: application/json" \
            -d '{
              "ref": "${{ github.sha }}",
              "deployment_type": "backend",
              "features": ["google_oauth", "redis_sessions", "prisma_postgres"]
            }')

          http_code=$(echo "$response" | cut -d':' -f2)

          if [[ $http_code -eq 200 || $http_code -eq 201 ]]; then
            echo "‚úÖ Backend deployment initiated successfully (HTTP $http_code)"
          else
            echo "‚ùå Backend deployment failed (HTTP $http_code)"
            echo "Response: $(echo "$response" | cut -d':' -f1)"
            exit 1
          fi

      - name: Deploy Frontend App
        if: steps.validate-secrets.outputs.deployment_ready == 'true' && secrets.RENDER_DEPLOY_HOOK_FRONTEND != ''
        run: |
          echo "üöÄ Deploying AI Finance Dashboard Frontend..."

          response=$(curl -s -w "%{response_code}:%{http_code}" \
            -X POST "${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}" \
            -H "Content-Type: application/json" \
            -d '{
              "ref": "${{ github.sha }}",
              "deployment_type": "frontend",
              "build_command": "pnpm build"
            }')

          http_code=$(echo "$response" | cut -d':' -f2)

          if [[ $http_code -eq 200 || $http_code -eq 201 ]]; then
            echo "‚úÖ Frontend deployment initiated successfully (HTTP $http_code)"
          else
            echo "‚ùå Frontend deployment failed (HTTP $http_code)"
            exit 1
          fi

      - name: Wait and Verify Production Health
        if: steps.validate-secrets.outputs.deployment_ready == 'true'
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 45  # Allow time for Render deployment

          backend_url="${{ vars.BACKEND_URL || 'https://ai-finance-dashboard-api.onrender.com' }}"

          echo "üîç Checking production health at $backend_url/health"

          max_retries=5
          retry_count=0

          while [ $retry_count -lt $max_retries ]; do
            if response=$(curl -s --max-time 10 "$backend_url/health"); then
              echo "Health response: $response"
              
              # Check service statuses
              if echo "$response" | grep -q '"status":"success"'; then
                echo "‚úÖ API is healthy"
                
                # Check Redis integration
                if echo "$response" | grep -q '"redis":"healthy"'; then
                  echo "‚úÖ Redis integration verified in production"
                else
                  echo "‚ö†Ô∏è Redis status unclear, but API is responding"
                fi
                
                # Check database
                if echo "$response" | grep -q '"database":"connected"'; then
                  echo "‚úÖ Database connection verified"
                fi
                
                break
              fi
            fi
            
            retry_count=$((retry_count + 1))
            echo "‚ùå Health check attempt $retry_count failed, retrying..."
            sleep 10
          done

          if [ $retry_count -eq $max_retries ]; then
            echo "‚ùå Production health check failed after $max_retries attempts"
            echo "üîß Deployment may still be in progress - check Render dashboard"
          fi

      - name: Test OAuth Configuration
        if: steps.validate-secrets.outputs.deployment_ready == 'true'
        run: |
          echo "üîç Testing OAuth endpoints..."

          backend_url="${{ vars.BACKEND_URL || 'https://ai-finance-dashboard-api.onrender.com' }}"

          # Test auth status endpoint (should return 401 for unauthenticated)
          if curl -s --max-time 10 "$backend_url/api/auth/status" | grep -q '"isAuthenticated":false'; then
            echo "‚úÖ OAuth status endpoint working"
          else
            echo "‚ö†Ô∏è OAuth status endpoint may need verification"
          fi

          # Check if OAuth initiation endpoint exists (should redirect)
          if curl -s -I --max-time 10 "$backend_url/api/auth/google" | grep -q "30[0-9]"; then
            echo "‚úÖ OAuth initiation endpoint configured"
          else
            echo "‚ö†Ô∏è OAuth initiation may need manual verification"
          fi

  # ========== POST-DEPLOYMENT NOTIFICATIONS ==========
  notify:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Send Discord Notification
        if: secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            status_emoji="‚úÖ"
            status_color="3066993"
            status_text="Deployment Successful"
          else
            status_emoji="‚ùå" 
            status_color="15158332"
            status_text="Deployment Failed"
          fi

          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"$status_emoji AI Finance Dashboard Deployment\",
                \"description\": \"**Status:** $status_text\n**Commit:** \`${{ github.sha }}\`\n**Branch:** \`${{ github.ref_name }}\`\n**Author:** ${{ github.actor }}\",
                \"color\": $status_color,
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\",
                \"fields\": [
                  {\"name\": \"Frontend\", \"value\": \"${{ vars.FRONTEND_URL || 'Not configured' }}\", \"inline\": true},
                  {\"name\": \"Backend API\", \"value\": \"${{ vars.BACKEND_URL || 'Not configured' }}\", \"inline\": true}
                ]
              }]
            }" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"

      - name: Create Deployment Summary
        run: |
          echo "# üöÄ AI Finance Dashboard Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend API | ${{ needs.deploy.result == 'success' && '‚úÖ Deployed' || '‚ùå Failed' }} | ${{ vars.BACKEND_URL || 'Not configured' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend App | ${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND != '' && '‚úÖ Deployed' || '‚ö†Ô∏è Not configured' }} | ${{ vars.FRONTEND_URL || 'Not configured' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Features:** Google OAuth, Redis Sessions, PostgreSQL with Prisma" >> $GITHUB_STEP_SUMMARY
