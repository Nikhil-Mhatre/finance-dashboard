name: Deploy to Render Production

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_dashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: |
            backend/pnpm-lock.yaml
            frontend/pnpm-lock.yaml

      - name: Install backend dependencies
        run: pnpm install
        working-directory: backend

      - name: Install frontend dependencies
        run: pnpm install
        working-directory: frontend

      - name: Generate Prisma Client
        run: pnpm prisma generate
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard_test

      - name: Run database migrations
        run: pnpm prisma migrate deploy
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finance_dashboard_test

      - name: Type check backend
        run: pnpm type-check
        working-directory: backend

      - name: Type check frontend
        run: pnpm type-check
        working-directory: frontend

      - name: Build backend
        run: pnpm build
        working-directory: backend

      - name: Build frontend
        run: SKIP_LINT=true pnpm build
        working-directory: frontend

      - name: Run tests (if available)
        run: |
          cd backend && (pnpm test || echo "No backend tests found")
          cd ../frontend && (pnpm test || echo "No frontend tests found")

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

  deploy:
    name: Deploy to Render Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://your-frontend-app.onrender.com

    steps:
      - name: Check Deploy Hooks Configuration
        id: check-hooks
        run: |
          echo "Checking deployment prerequisites..."
          if [[ -z "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}" ]]; then
            echo "‚ö†Ô∏è  RENDER_DEPLOY_HOOK_BACKEND not configured"
            echo "backend_ready=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Backend deploy hook configured"
            echo "backend_ready=true" >> $GITHUB_OUTPUT
          fi

          if [[ -z "${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}" ]]; then
            echo "‚ö†Ô∏è  RENDER_DEPLOY_HOOK_FRONTEND not configured"
            echo "frontend_ready=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Frontend deploy hook configured"
            echo "frontend_ready=true" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Backend to Render
        if: steps.check-hooks.outputs.backend_ready == 'true'
        run: |
          echo "üöÄ Deploying backend to Render..."
          response=$(curl -s -w "%{http_code}" -o /tmp/backend_response.txt \
            -X POST "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}" \
            -H "Content-Type: application/json")

          http_code=${response: -3}
          if [[ $http_code -eq 200 || $http_code -eq 201 ]]; then
            echo "‚úÖ Backend deployment triggered successfully (HTTP $http_code)"
            cat /tmp/backend_response.txt
          else
            echo "‚ùå Backend deployment failed (HTTP $http_code)"
            cat /tmp/backend_response.txt
            exit 1
          fi

      - name: Deploy Frontend to Render
        if: steps.check-hooks.outputs.frontend_ready == 'true'
        run: |
          echo "üöÄ Deploying frontend to Render..."
          response=$(curl -s -w "%{http_code}" -o /tmp/frontend_response.txt \
            -X POST "${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}" \
            -H "Content-Type: application/json")

          http_code=${response: -3}
          if [[ $http_code -eq 200 || $http_code -eq 201 ]]; then
            echo "‚úÖ Frontend deployment triggered successfully (HTTP $http_code)"
            cat /tmp/frontend_response.txt
          else
            echo "‚ùå Frontend deployment failed (HTTP $http_code)"
            cat /tmp/frontend_response.txt
            exit 1
          fi

      - name: Deployment Instructions
        if: steps.check-hooks.outputs.backend_ready != 'true' || steps.check-hooks.outputs.frontend_ready != 'true'
        run: |
          echo "üìã Deployment Setup Required:"
          echo "=============================="
          echo "1. Create services in Render Dashboard:"
          echo "   ‚Ä¢ Backend: Node.js Web Service"
          echo "   ‚Ä¢ Frontend: Node.js Web Service"
          echo "   ‚Ä¢ Database: PostgreSQL"
          echo ""
          echo "2. Configure each service:"
          echo "   ‚Ä¢ Connect GitHub repository"
          echo "   ‚Ä¢ Set root directory (backend/ or frontend/)"
          echo "   ‚Ä¢ Set build and start commands"
          echo ""
          echo "3. Get deploy hooks:"
          echo "   ‚Ä¢ Service ‚Üí Settings ‚Üí Deploy Hook"
          echo "   ‚Ä¢ Copy webhook URLs"
          echo ""
          echo "4. Add GitHub Secrets:"
          echo "   ‚Ä¢ RENDER_DEPLOY_HOOK_BACKEND"
          echo "   ‚Ä¢ RENDER_DEPLOY_HOOK_FRONTEND"
          echo ""
          echo "5. Push code again to trigger deployment"

  notify:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [test, security-scan, deploy]
    if: always()

    steps:
      - name: Final Status Report
        run: |
          echo "üìä CI/CD Pipeline Summary:"
          echo "=========================="

          # Test results
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ Tests: Passed"
          else
            echo "‚ùå Tests: Failed"
          fi

          # Security scan
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "‚úÖ Security: Passed"
          else
            echo "‚ö†Ô∏è  Security: Issues found"
          fi

          # Deployment
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment: Success"
            echo "üåê Check your live app!"
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è  Deployment: Skipped (setup required)"
          else
            echo "‚ùå Deployment: Failed"
          fi

          echo "=========================="

          # Overall result
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "üéâ CI/CD Core: All systems working!"
          else
            echo "üîß CI/CD: Needs attention"
            exit 1
          fi
